utop # #use "sde2.caml";;

val fD_helper : int list * int list -> int = <fun>
val first_duplicate : int list -> int = <fun>
val remove : 'a * 'a list * 'a list -> 'a list = <fun>
val nonRepeatHelper : int list * int list * int list -> int = <fun>
val first_nonrepeating : int list -> int = <fun>
val isTarget : int * int * int -> bool = <fun>
val checkSum : int * int list * int -> bool = <fun>
val sumOfTwo : int list * int list * int -> bool = <fun>
val takeHelper : int * int * 'a list * 'a list -> 'a list = <fun>
val take : int * 'a list -> 'a list = <fun>
val dropHelper : int * int * 'a list * 'b list -> 'a list = <fun>
val drop : int * 'a list -> 'a list = <fun>
val psHelper2 : 'a list * 'a list * 'a list * 'a list list -> 'a list list = <fun>
val psHelper1 : 'a list * 'a list * 'a list list -> 'a list list = <fun>
val powerset : 'a list -> 'a list list = <fun>

******************************* First Duplicate ********************************
utop # first_duplicate [1;2;3;4;5;6;7;4;5;8;9];;
- : int = 4

utop # first_duplicate [1;2;3;4;5;6;7;8;5;2;9];;
- : int = 5

utop # first_duplicate [1;2;3;3;2;1];;
- : int = 3

utop # first_duplicate [1;2;3;4;5;6;7;8;9;10];;
- : int = -10000 

****************************** First Nonrepeating ******************************
utop # first_nonrepeating [1;2;3;2;7;5;6;1;3];;
- : int = 7 

utop # first_nonrepeating [1;2;9;3;2;7;5;6;1;3];;
- : int = 9

utop # first_nonrepeating [1;2;9;3;2;7;5;6;10;30];;
- : int = 1

 utop # first_nonrepeating [1;2;9;3;2;7;5;6;1;10;30];;
- : int = 9

utop # first_nonrepeating [1;2;9;3;2;7;5;9;6;1;10;30];;
- : int = 3

utop # first_nonrepeating [1;2;3;2;7;5;6;1;3];;
- : int = 7

utop # first_nonrepeating [1;2;3;4;5;1;2;3;4;5];;
- : int = -10000

utop # first_nonrepeating [1;2;3;4;5;1;2;3;4;9];;
- : int = 5

utop # first_nonrepeating [1;1;1;2;2;2];;
- : int = -10000

********************************** SumOfTwo ************************************
utop # sumOfTwo([1;2;3],[10;20;30;40],42);;
- : bool = true

utop # sumOfTwo([1;2;3],[10;20;30;40],40);;
- : bool = false

utop # sumOfTwo([1;2;3],[10;20;30;40],41);;
- : bool = true

utop # sumOfTwo([1;2;3],[10;20;30;40],43);;
- : bool = true

utop # sumOfTwo([1;2;3],[10;20;30;40],44);;
- : bool = false

utop # sumOfTwo([1;2;3],[10;20;30;40],11);;
- : bool = true

utop # sumOfTwo([1;2;3],[10;20;30;40],15);;
- : bool = false

************************************* Take *************************************
utop # take (2, [1;2;3;4]);;
- : int list = [1; 2]

utop # take (15, [1;2;3;4]);;
- : int list = [1; 2; 3; 4]

utop # take (-1, [1;2;3;4]);;
- : int list = []

utop # take (2, [5;6;7;8]);;
- : int list = [5; 6]

************************************* Drop *************************************

utop # drop (2, [1;2;3;4]);;
- : int list = [3; 4]

top # drop (2,[1;2;3;4;5;6]);;
- : int list = [3; 4; 5; 6]

utop # drop (2,[4;3;2;1]);;
- : int list = [2; 1]

utop # drop (15, [1;2;3;4]);;
- : int list = []

utop # drop (-1, [1;2;3;4]);;
- : int list = []

utop # drop (0, [1;2;3;4]);;
- : int list = [1; 2; 3; 4]

*********************************** Powerset ***********************************
utop # powerset [1;2;3];;
- : int list list = [[]; [1]; [1; 2; 3]; [1; 2]; [1; 3]; [2]; [2; 3]; [3]]

utop # powerset [1;2];;
- : int list list = [[]; [1]; [1; 2]; [2]]

utop # powerset [1;2;3;4];;
- : int list list =
[[]; [1]; [1; 2; 3; 4]; [1; 2]; [1; 3; 4]; [1; 3]; [1; 4]; [2]; [1; 2; 3];
 [1; 2; 4]; [2; 3; 4]; [2; 3]; [2; 4]; [3]; [3; 4]; [4]]